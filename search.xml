<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[多个电脑一起写blog]]></title>
    <url>%2F2018%2F01%2F13%2F%E5%A4%9A%E4%B8%AA%E7%94%B5%E8%84%91%E4%B8%80%E8%B5%B7%E5%86%99blog%2F</url>
    <content type="text"><![CDATA[你是不是也有这样子的问题，如果台式机可以写博客上传，那笔记本想写怎么办呢？我来告诉你。 传送门送上：1，2第一篇的文章比较短，但是就是精华，第二篇，有部分图文，会给你一些更直观的参考。 我呢，还是给大家一些建议 不要怕出错，说实话，对于一个小白来说，什么也不懂，什么是git啊，没关系，不要担心，要相信自己。 尽管你可能不懂git,可是这玩意还是不得不学的额，常见的命令 git pull origin hexo: 本机同步GitHub里的文章 git push origin hexo: 上传文章到GitHub]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Me]]></title>
    <url>%2F2018%2F01%2F13%2FMe%2F</url>
    <content type="text"><![CDATA[Hey,大家好！！！你们可以叫我echo，这是三毛的英文名，感觉三毛和荷西的爱情很酷，所以我随了三毛。]]></content>
  </entry>
  <entry>
    <title><![CDATA[echo xi]]></title>
    <url>%2F2018%2F01%2F13%2Ffirst%2F</url>
    <content type="text"><![CDATA[xixiOK?]]></content>
  </entry>
  <entry>
    <title><![CDATA[git的使用]]></title>
    <url>%2F2018%2F01%2F13%2Fnote%2F</url>
    <content type="text"><![CDATA[配置用户名和Email$ git config –global user.name “Your Name”$ git config –global user.email “email@example.com” 创建版本库初始化一个Git仓库，使用git init命令。添加文件到Git仓库，分两步： 第一步，使用命令git add ，注意，可反复多次使用，添加多个文件； 第二步，使用命令git commit -m “”，完成。 vim的使用i 进入输入模式ESC 退出输入模式，进入命令模式:wq 保存修改并退出vim 状态的查看和比较 比较 git diff 查看 git status 文件名 版本回退 查看历史 git log/git log –pretty=online当前版本用HEAD表示，HEAD^表示上一个版本，HEAD^^表示上上版本，HEAD~100表示上100个版本 回退到当前版本的上一个版本 git reset –hard HEAD^当你回退到以前版本，那当前版本会不见，可以使用 git reset –hard (commit id)来恢复 记录执行的每一次命令 git reflog通过此条命令可以查看到各个版本commit id HEAD指向当前版本git log 查看提交历史git reflog 查看命令历史 工作区和暂存区 工作区(Working Directory)就是当前目录 版本库(Repository)工作区中隐藏目录.git,Git的版本库版本库中有：暂存区、第一个分支master、指向master的一个指针HEAD 暂存区(Stage)把文件往Git版本库里添加的时候，分为两步第一步：git add，意义是把文件添加到暂存区第二步: git commit,意义是将暂存区的所有内容提交到当前分支开始默认我们在master分支 Git是如何跟踪修改的：每次修改，如果不add到暂存区，那就不会加入到commit中。 撤销和修改命令是：git checkout – filename file自修改后还没有被放到暂存区，使用命令后，返回版本库的状态 file已经添加到了暂存区，又作了修改，使用命令后，返回暂存区的状态总之，是文件返回最近一次git commit 或 git add 的状态 命令：git reset HEAD file指的是把暂存区的修改撤销，回到工作区的版本git reset 既可以回退版本，也可以把暂存区的修改回退到工作区。 总结： 场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout – file。 场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。 场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。 删除文件将已经提交到版本库的文件删除，需要同步git git rm file git commit -m “”如果是误删git checkout – file 添加远程仓库 要关联一个远程库，使用命令**git remote add origin git@server-name:path/repo-name.git; 关联后，使用命令git push -u origin master 第一次推送master分支的所有内容; 此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改; Tipsssh:是一个安全协议，git支持git协议。第一次使用ssh的时候，需要设置公钥和私钥，命令是 ssh-keygen -t rsa -C “youremail@example.com”对应的在用户主目录中会生成.ssh目录，目录中有id_rsa和id_rsa.pub两个文件 clone远程库命令是git clone git@server-name:path/repo-name.gitgit支持多种协议，包括https，ssh 等等 创建与合并分支 git checkout -b dev:创建了dev分支命令等同于：git branch dev ; git checkout dev git branch:查看当前分支，罗列出所有分支 git merge dev:将dev分支的工作成果合并到当前分支上 git branch -d dev:删除dev分支 解决冲突当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。用git log –graph命令可以看到合并图。好看一点用git log –graph –pretty=oneline –abbrev -commit 分支策略 master分支用来发布新版本，平时不东 dev分支是用来干活的，干完活和master合并 每个团队成员创建自己的分支，是不是和dev分支合并 合并时，默认是fast forward合并，合并后删除分支后看不出是合并的，会丢失信息，加上–nn-ff参数就可以使用普通模式合并 Bug分支当我们遇到bug需要修复，手头的任务又没有做完，我们可以使用git stash来保护现场，类似于进程中断。当我们修复好bug后，我们可以用git stash list查看工作现场。 git stash git stash list git stash apply:恢复现场，但不删除stash git stash drop:删除stash git stash pop:等于上两步 feature分支开发一个新feature，最好创建一个分支；如果要丢弃一个没有被合并过的分支，可以通过git branch -D name 强行删除。 多人协作 git remote :用于查看远程库的信息 git remote -v :用于查看远程库的详细信息 git push origin master/dev :master分支需要和远程同步，dev分支也一样，bug分支不需要，feature分支看情况]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何建立一个独立博客]]></title>
    <url>%2F2018%2F01%2F12%2Fhexo-github%2F</url>
    <content type="text"><![CDATA[我来猜一猜你为什么要建博客：装逼，找个地方发泄，无聊。。。如果不对，你可以留言告诉我 ^_^ 前言如果你是小白，那你肯定会受好多挫，你可以百度也可以Google，当然我希望什么也不要遇到，因为我会告诉你所有可能的错，别问我为什么 o(╥﹏╥)o what you need ? git hexo github 这三个是啥呢？github，类似于一个服务器，这样别人就可以在网上找到你的博客，当然你也可以自己买服务器。hexo，模板，就是博客显示页面的样子，有好多好人已经写好了很多好看的模板，你挑一个喜欢的，当然你也可以自己写！git，上传工具，就是把你写好的东西，上传到网上。 安装gitGit下载:下载完就可以安装了，一路next 结束安装，检查自己有木有成功，Win+R，cmd 如果看见版本号，就成功啦！！是不是很惊喜，很开心，吼简单哦！！ 安装hexo恩~，这个地方有点烦的，请注意！！！官网：官方文档：很详细，可以仔细学习一波。我呢，就给一些注意事项 先要安装Node.js 在任何地方(比如桌面)右击，点击 git bash here，在输入 npm install -g hexo-cli 回车，输入画面如图： hexo是使用Markdown解析文章的，那标记后面需要一个空格图片中每个key后面都有空格，图中的绿色方框，有点大小不一，但都代表一个空格 最后写完文章部署的时候，可以用hexo clean &amp;&amp; hexo g &amp;&amp; hexo d一条命令我在写这个文档的时候，也重看了一边官网，虽说很详细，带我不想看啊，好烦啊，好烦啊，与木有这种感觉，o(╥﹏╥)o GitHub这个真的是一个好神奇的地方，抄作业的好地方，代码不会写，来抄一波，没有灵感，来搜一波，比什么百度靠谱多了。来一个传送门，这篇文章在这儿写的很详细贴心，最主要页面看的不是那么难看。 OK我想你已经完成你的博客的建立了，是不是很happy，我当时就老happy了，可是，记住写博客还是一件很艰难的事，时间久了，人就懒了，就不写了。当然，我知道说的不是你，(#^.^#)]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown的使用]]></title>
    <url>%2F2018%2F01%2F12%2FMarkdown%2F</url>
    <content type="text"><![CDATA[Markdown的好处 比纯文本排版显示的好看 比Word排版显示简单 学起来简单 学习资料 Markdown中文版语法说明 博客1 博客2 建议 不用什么语法都学，学几个常用的就可以，比如标题，粗体，斜体。 你可以用通用文本编辑器：notepad++，sublime，也可以用专用的MarkPad,Mou。 祝你开心每一天！！！(^▽^)]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
</search>
