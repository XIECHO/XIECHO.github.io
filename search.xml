<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <url>/2018/04/28/428_2/</url>
      <content type="html"><![CDATA[<hr>
<p>title: 字符串<br>date: 2018-04-28 14:14:21<br>tags: [字符串 ]</p>
<h2 id="categories-algorithm"><a href="#categories-algorithm" class="headerlink" title="categories: algorithm"></a>categories: algorithm</h2><h1 id="替换空格"><a href="#替换空格" class="headerlink" title="替换空格"></a>替换空格</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote>
<p>请实现一个函数，将一个字符串中的空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(StringBuffer str)</span> </span>&#123;</span><br><span class="line">        String strT = str.toString();</span><br><span class="line">        String temp = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">char</span>[] ch = strT.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ch.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ch[i] == <span class="string">' '</span>)&#123;</span><br><span class="line">                temp = temp + <span class="string">"%20"</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                temp = temp + ch[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      
        
    </entry>
    
    <entry>
      <title></title>
      <url>/2018/04/28/428_1/</url>
      <content type="html"><![CDATA[<hr>
<p>title: 递归<br>date: 2018-04-28 10:14:21<br>tags: [递归]</p>
<h2 id="categories-algorithm"><a href="#categories-algorithm" class="headerlink" title="categories: algorithm"></a>categories: algorithm</h2><h1 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote>
<p>大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项。n&lt;=39</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Fibonacci(n-<span class="number">1</span>)+Fibonacci(n-<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<a id="more"></a>
<h1 id="跳台阶"><a href="#跳台阶" class="headerlink" title="跳台阶"></a>跳台阶</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote>
<p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">JumpFloor</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> JumpFloor(target-<span class="number">2</span>)+JumpFloor(target-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="More"><a href="#More" class="headerlink" title="More"></a>More</h2><p>我记得大三上算法课听过这个题，只不过不会，一直不会，今天写第一次就过了。我擦类。。。。。。。。</p>
<h1 id="变态跳台阶"><a href="#变态跳台阶" class="headerlink" title="变态跳台阶"></a>变态跳台阶</h1><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote>
<p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p>
<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">JumpFloorII</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( target == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span> * JumpFloorII(target - <span class="number">1</span>);</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>因为n级台阶，第一步有n种跳法：跳1级、跳2级、到跳n级，跳1级，剩下n-1级，则剩下跳法是f(n-1)，跳2级，剩下n-2级，则剩下跳法是f(n-2)，所以f(n)=f(n-1)+f(n-2)+…+f(1)，因为f(n-1)=f(n-2)+f(n-3)+…+f(1)，所以f(n)=2*f(n-1) </p>
<h1 id="矩形覆盖"><a href="#矩形覆盖" class="headerlink" title="矩形覆盖"></a>矩形覆盖</h1><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote>
<p>我们可以用2<em>1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2</em>1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？</p>
<h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">RectCover</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> RectCover(target-<span class="number">1</span>)+RectCover(target-<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>其实就是Fibonacci序列的等价转换。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title></title>
      <url>/2018/04/27/427data/</url>
      <content type="html"><![CDATA[<hr>
<p>title: SQL入门<br>date: 2018-04-27 15:37:21<br>tags: [SQL]</p>
<h2 id="categories"><a href="#categories" class="headerlink" title="categories: "></a>categories: </h2><h1 id="数据操作语言（DML）"><a href="#数据操作语言（DML）" class="headerlink" title="数据操作语言（DML）"></a>数据操作语言（DML）</h1><ul>
<li>select: 从数据库中获取数据</li>
<li>update： 更新数据库表中的数据 </li>
<li>delete： 从数据库中删除数据</li>
<li>insert into : 向数据库中插入数据</li>
</ul>
<h1 id="数据定义语言（DDL）"><a href="#数据定义语言（DDL）" class="headerlink" title="数据定义语言（DDL）"></a>数据定义语言（DDL）</h1><p>用于创建和删除表格，也可以定义索引（键），规定表之间的链接，以及施加表间的约束。</p>
<ul>
<li>create database : 创建新数据库</li>
<li>alter database : 修改数据库</li>
<li>create table ： 创建新表</li>
<li>alter table : 变更（改变）数据库表</li>
<li>drop table : 删除表</li>
<li>create index ： 创建索引（搜索键）</li>
<li>drop index : 删除索引</li>
</ul>
<h1 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h1><h2 id="select语句"><a href="#select语句" class="headerlink" title="select语句"></a>select语句</h2><ul>
<li>select 列名称 from 表名称</li>
<li>select * from 表名称</li>
</ul>
<h2 id="select-distinct"><a href="#select-distinct" class="headerlink" title="select distinct"></a>select distinct</h2><p>去重复</p>
<ul>
<li>select distinct 列名称 from 表名称</li>
</ul>
<h2 id="where子句"><a href="#where子句" class="headerlink" title="where子句"></a>where子句</h2><p>如需有条件地从表中选取数据，可将where子句添加到select语句。</p>
<ul>
<li>select 列名称 from 表名称 where 列 运算符 值<br>运算符： =, &lt;&gt;, &gt;, &lt;, &gt;=, &lt;=, between, like</li>
</ul>
<h2 id="AND和OR运算符"><a href="#AND和OR运算符" class="headerlink" title="AND和OR运算符"></a>AND和OR运算符</h2><p>可在where子语句中把两个或多个条件结合起来。</p>
<ul>
<li>select * from Persons where FirstName=’Thomas’ and LastName=’Carter’</li>
</ul>
<h2 id="order-by语句"><a href="#order-by语句" class="headerlink" title="order by语句"></a>order by语句</h2><p>order by 语句用于根据指定的列对结果集进行排序。<br>默认升序，降序用desc。</p>
<ul>
<li>select Company，OrderNumber from Orders order by Company desc</li>
<li>select Company, ORderNumber from orders order by Company desc, orderNumber asc</li>
</ul>
<p>desc: descend; asc: ascend</p>
<h2 id="insert-into语句"><a href="#insert-into语句" class="headerlink" title="insert into语句"></a>insert into语句</h2><p>插入新的行。</p>
<ul>
<li>insert into 表名称 values(值1， 值2， …)</li>
<li><p>insert into table_name(列1，列2，…) values(值1，值2，…)</p>
</li>
<li><p>insert into Persons(lastName, Address) values (‘Wilson’, ‘Chapms-Elysees’)</p>
</li>
</ul>
<h2 id="update语句"><a href="#update语句" class="headerlink" title="update语句"></a>update语句</h2><ul>
<li>update 表名称 set 列名称 = ‘新值’ where 列名称 = 某值</li>
</ul>
<h2 id="delete语句"><a href="#delete语句" class="headerlink" title="delete语句"></a>delete语句</h2><p>删除表中的行</p>
<ul>
<li>delect from 表名称 where 列名称 = 值<br>删除所有行</li>
<li>delect from table_name</li>
</ul>
<h2 id="limit语句"><a href="#limit语句" class="headerlink" title="limit语句"></a>limit语句</h2><p>返回表中头几行</p>
<ul>
<li>select * from table_name limit number</li>
</ul>
<h2 id="like操作符"><a href="#like操作符" class="headerlink" title="like操作符"></a>like操作符</h2><p>like操作符用于在where子句中搜索列中的指定模式。</p>
<ul>
<li>select * from Persons where city like ‘N%’<br>%可用于定义通配符（模式中缺少的字母）， NOT指代不包含</li>
<li>select * from Persons where city not like ‘%lon%’</li>
</ul>
<h2 id="SQL通配符"><a href="#SQL通配符" class="headerlink" title="SQL通配符"></a>SQL通配符</h2><p>通配符必须与Like运算符一起使用</p>
<p>通配符 | 描述<br>% | 代替一个或多个字符</p>
<ul>
<li>| 仅代替一个字符</li>
</ul>
<h2 id="in"><a href="#in" class="headerlink" title="in"></a>in</h2><ul>
<li>select * from table_name where 列 in (值1，值2)</li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title></title>
      <url>/2018/04/27/427/</url>
      <content type="html"><![CDATA[<hr>
<p>title: 数组中重复的数字 &amp;&amp; 构建乘积数组<br>date: 2018-04-27 10:37:21<br>tags: [数组]</p>
<h2 id="categories-algorithm"><a href="#categories-algorithm" class="headerlink" title="categories: algorithm"></a>categories: algorithm</h2><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。 例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是第一个重复的数字2。</p>
</blockquote>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Parameters:</span></span><br><span class="line">    <span class="comment">//    numbers:     an array of integers</span></span><br><span class="line">    <span class="comment">//    length:      the length of array numbers</span></span><br><span class="line">    <span class="comment">//    duplication: (Output) the duplicated number in the array number,length of duplication array is 1,so using duplication[0] = ? in implementation;</span></span><br><span class="line">    <span class="comment">//                  Here duplication like pointor in C/C++, duplication[0] equal *duplication in C/C++</span></span><br><span class="line">    <span class="comment">//    这里要特别注意~返回任意重复的一个，赋值duplication[0]</span></span><br><span class="line">    <span class="comment">// Return value:       true if the input is valid, and there are some duplications in the array number</span></span><br><span class="line">    <span class="comment">//                     otherwise false</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">duplicate</span><span class="params">(<span class="keyword">int</span> numbers[],<span class="keyword">int</span> length,<span class="keyword">int</span> [] duplication)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span>[] temp = <span class="keyword">new</span> <span class="keyword">boolean</span>[length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> tempInt = numbers[i];</span><br><span class="line">            <span class="keyword">if</span>(!temp[tempInt])&#123;</span><br><span class="line">                temp[tempInt] = <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                duplication[<span class="number">0</span>] = tempInt;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>用一个Boolean数组判断数字有没有重复过。</p>
<h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><p>1 Boolean数组默认初始值是false</p>
<h1 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>给定一个数组A[0,1,…,n-1],请构建一个数组B[0,1,…,n-1],其中B中的元素B[i]=A[0]<em>A[1]</em>…<em>A[i-1]</em>A[i+1]<em>…</em>A[n-1]。不能使用除法</p>
</blockquote>
<h1 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h1><p>```java<br>import java.util.ArrayList;<br>public class Solution {<br>    public int[] multiply(int[] A) {<br>        int aLength = A.length;<br>        int[] value = new int[aLength];<br>        for(int i = 0 ; i<alength; i++){="" int="" temp="1;" for(int="" j="0;" j<alength;="" j++="" ){="" if(j<i){="" }else="" if(j="">i){<br>                    temp = temp*A[j];<br>                }<br>            }<br>            value[i] = temp;<br>        }<br>        return value;<br>    }<br>}</alength;></p>
<h1 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h1><p>做乘法时，把自己当作1，不乘就可以了</p>
<h1 id="坑-1"><a href="#坑-1" class="headerlink" title="坑"></a>坑</h1><p>1 数组是length，list是size()。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[按之字形顺序打印二叉树]]></title>
      <url>/2018/04/26/426_1/</url>
      <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推。</p>
</blockquote>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">    TreeNode left = <span class="keyword">null</span>;</span><br><span class="line">    TreeNode right = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 队列LinkedList完成层序遍历，用end记录每层结点数目</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt; &gt; Print(TreeNode pRoot) &#123;</span><br><span class="line">        LinkedList&lt;TreeNode&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        ArrayList layer = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; last = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        list.add(pRoot);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(pRoot == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> last;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(! list.isEmpty())&#123;</span><br><span class="line">            TreeNode t = list.remove();</span><br><span class="line">            layer.add(t.val);</span><br><span class="line">            start++;</span><br><span class="line">            <span class="keyword">if</span>(t.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">                list.add(t.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(t.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">                list.add(t.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(start == end)&#123;</span><br><span class="line">                start = <span class="number">0</span>;</span><br><span class="line">                end = list.size();</span><br><span class="line">                <span class="keyword">if</span>( count % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                    Collections.reverse(layer);</span><br><span class="line">                    last.add(layer);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    last.add(layer);</span><br><span class="line">                &#125;</span><br><span class="line">                layer = <span class="keyword">new</span> ArrayList();</span><br><span class="line">                </span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>这个一个层次遍历的应用，中间需要记录每一行的开始（start）和结束（end），来确定一层输出一行。</p>
<h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><p>1 我最开始的想法是每一个节点对应一个数字（行号）确定他是在哪一行，等到对应节点的行号与下一个节点不一样的时候，就换行。与上面的代码区别是多了一个ArrayList，记录好多不需要的信息，浪费了。</p>
<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p>1 层次遍历</p>
<ul>
<li>层次遍历，底层就是一个队列。算法思路是： 先将二叉树头节点入队列，然后出队列，访问该节点，如果它有左子树，则将左子树根节点入队，如果它有右子树，则将右子树根节点入队。然后出队列，对出队列节点访问，如此反复，直到队列为空为止。</li>
</ul>
<h1 id="More"><a href="#More" class="headerlink" title="More"></a>More</h1><p>代码中是通过LinkedList模拟队列的，Java把队列，栈等数据结构封装的很好，但是最好还是要自己来理解实现一下这些底层。最近有看redis，里面很多操作的底层也是这些基础。</p>
]]></content>
      
        <categories>
            
            <category> algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[遍历二叉树]]></title>
      <url>/2018/04/26/426/</url>
      <content type="html"><![CDATA[<h1 id="树定义"><a href="#树定义" class="headerlink" title="树定义"></a>树定义</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">    TreeNode left = <span class="keyword">null</span>;</span><br><span class="line">    TreeNode right = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h1><h2 id="先序遍历递归"><a href="#先序遍历递归" class="headerlink" title="先序遍历递归"></a>先序遍历递归</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preorder</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    System.out.print(root);</span><br><span class="line">    preorder(root.left);</span><br><span class="line">    preorder(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="先序遍历非递归"><a href="#先序遍历非递归" class="headerlink" title="先序遍历非递归"></a>先序遍历非递归</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preorder2</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    LinkedList&lt;TreeNode&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span>(root != <span class="keyword">null</span> || !list.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.print(root);</span><br><span class="line">            list.push(root);</span><br><span class="line">            root = root.left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!list.isEmpty())&#123;</span><br><span class="line">            root = list.pop();</span><br><span class="line">            root = root.right();</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h1><h2 id="中序遍历递归"><a href="#中序遍历递归" class="headerlink" title="中序遍历递归"></a>中序遍历递归</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    inorder(root.left);</span><br><span class="line">    System.out.print(root);</span><br><span class="line">    inorder(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="中序遍历非递归"><a href="#中序遍历非递归" class="headerlink" title="中序遍历非递归"></a>中序遍历非递归</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inorder2</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    LinkedList&lt;TreeNode&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span>(root != <span class="keyword">null</span> || !list.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">            list.push(root);</span><br><span class="line">            root = root.left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!list.isEmpty())&#123;</span><br><span class="line">            root = list.pop();</span><br><span class="line">            System.out.print(root);</span><br><span class="line">            root = root.right();</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h1><h2 id="后序遍历递归"><a href="#后序遍历递归" class="headerlink" title="后序遍历递归"></a>后序遍历递归</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postorder</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    postorder(root.left);</span><br><span class="line">    postorder(root.right);</span><br><span class="line">    System.out.print(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="后序遍历非递归"><a href="#后序遍历非递归" class="headerlink" title="后序遍历非递归"></a>后序遍历非递归</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postorder2</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    LinkedList&lt;TreeNode&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    LinkedList&lt;TreeNode&gt; list2 = <span class="keyword">new</span> LinkedList&lt;&gt;(); </span><br><span class="line">    <span class="keyword">while</span>(root != <span class="keyword">null</span> || !list.isEmpty()) &#123;  </span><br><span class="line">        <span class="keyword">while</span> (root != <span class="keyword">null</span>) &#123;  </span><br><span class="line">            list.push(root);  </span><br><span class="line">            list2.push(<span class="keyword">new</span> Integer(<span class="number">0</span>));  </span><br><span class="line">            root = root.left;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">while</span> (!list.isEmpty() &amp;&amp; list2.peek().equals(<span class="number">1</span>)) &#123;  </span><br><span class="line">            list2.pop();  </span><br><span class="line">            System.out.print(list.pop());  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (!list.isEmpty()) &#123;  </span><br><span class="line">            list2.pop();  </span><br><span class="line">            list2.push(<span class="keyword">new</span> Integer(<span class="number">1</span>));  </span><br><span class="line">            root = list.peek();  </span><br><span class="line">            root = root.right;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">level</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> end = <span class="number">1</span>;</span><br><span class="line">    LinkedList list = <span class="keyword">new</span> LinkedList();</span><br><span class="line">    list.add(root);</span><br><span class="line">    <span class="keyword">while</span>(!list.isEmpty())&#123;</span><br><span class="line">        TreeNode t = list.remove();</span><br><span class="line">        System.out.print(t.val);</span><br><span class="line">        start++;</span><br><span class="line">        <span class="keyword">if</span>(t.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">            list.add(t.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">            list.add(t.right);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(start == end)&#123;</span><br><span class="line">            start = <span class="number">0</span>;</span><br><span class="line">            end = list.size()；</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="More"><a href="#More" class="headerlink" title="More"></a>More</h1><p>/(ㄒoㄒ)/~~ /(ㄒoㄒ)/~~</p>
]]></content>
      
        
        <tags>
            
            <tag> 树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[二叉树的镜像]]></title>
      <url>/2018/04/25/425/</url>
      <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>操作给定的二叉树，将其变换为源二叉树的镜像。<br>输入描述:<br>二叉树的镜像定义：源二叉树<br>          8<br>         /  \<br>         6   10<br>        / \  / \<br>       5  7 9 11<br>      镜像二叉树<br>           8<br>          /  \<br>         10   6<br>       / \  / \<br>       11 9 7  5</p>
</blockquote>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val = 0;</span></span><br><span class="line"><span class="comment">    TreeNode left = null;</span></span><br><span class="line"><span class="comment">    TreeNode right = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public TreeNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Mirror</span><span class="params">(TreeNode pRoot)</span> </span>&#123;</span><br><span class="line">        Mirror2(root);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Mirror2</span><span class="params">(TreeNode t)</span></span>&#123;</span><br><span class="line">        TreeNode temp = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(t != <span class="keyword">null</span>)&#123;</span><br><span class="line">            temp = t.left;</span><br><span class="line">            t.left = t.right;</span><br><span class="line">            t.right = temp;</span><br><span class="line">            Mirror2(t.left);</span><br><span class="line">            Mirror2(t.right);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>将左右两个子树交换，递归的调用</p>
<h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><p>1 开始的时候将Mirror2(t.left)，Mirror2(t.right)写在了外面，这样的话，会报空，因为if走完后，接着走这两条。</p>
<h1 id="More"><a href="#More" class="headerlink" title="More"></a>More</h1><p>感觉人生第一次用递归一次写完这个题目，并提交成功，吼开心。。。。。</p>
]]></content>
      
        <categories>
            
            <category> algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[对称的二叉树]]></title>
      <url>/2018/04/24/424_2/</url>
      <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>请实现一个函数，用来判断一颗二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。</p>
</blockquote>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">    TreeNode left = <span class="keyword">null</span>;</span><br><span class="line">    TreeNode right = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isSymmetrical</span><span class="params">(TreeNode pRoot)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        TreeNode node = getMirror(pRoot);</span><br><span class="line">        <span class="keyword">return</span> isSymmetrical(pRoot,node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isSymmetrical</span><span class="params">(TreeNode pRoot,TreeNode node)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pRoot == <span class="keyword">null</span> &amp;&amp; node == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pRoot == <span class="keyword">null</span> || node  == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pRoot.val == node.val)&#123;</span><br><span class="line">            <span class="keyword">return</span> isSymmetrical(pRoot.left,node.left)&amp;&amp;isSymmetrical(pRoot.right,node.right);</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function">TreeNode <span class="title">getMirror</span><span class="params">(TreeNode pRoot)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pRoot == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(pRoot.val);</span><br><span class="line">        root.right = getMirror(pRoot.left);</span><br><span class="line">        root.left = getMirror(pRoot.right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>将树copy一份并求出其镜像树（将每个结点的左右子树交换），比较原树和镜像树的每个节点，如果全部一样，则是镜像树</p>
<h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><p>1 getMirror()函数也是递归定义。</p>
]]></content>
      
        <categories>
            
            <category> algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[把二叉树打印成多行]]></title>
      <url>/2018/04/24/424/</url>
      <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>从上到下按层打印二叉树，同一层结点从左至右输出。每一层输出一行。</p>
</blockquote>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">    TreeNode left = <span class="keyword">null</span>;</span><br><span class="line">    TreeNode right = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 队列LinkedList完成层序遍历，用end记录每层结点数目</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;ArrayList&lt;Integer&gt; &gt; Print(TreeNode pRoot) &#123;</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(pRoot == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;TreeNode&gt; layer = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; layerList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        layer.add(pRoot);</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(!layer.isEmpty())&#123;</span><br><span class="line">            TreeNode cur = layer.remove();</span><br><span class="line">            layerList.add(cur.val);</span><br><span class="line">            start++;</span><br><span class="line">            <span class="keyword">if</span>(cur.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                layer.add(cur.left);            </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cur.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                layer.add(cur.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//判断start是否end,来确定一层一行</span></span><br><span class="line">            <span class="keyword">if</span>(start == end)&#123;</span><br><span class="line">                end = layer.size();</span><br><span class="line">                start = <span class="number">0</span>;</span><br><span class="line">                result.add(layerList);</span><br><span class="line">                layerList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>这个一个层次遍历的应用，中间需要记录每一行的开始（start）和结束（end），来确定一层输出一行。</p>
<h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><p>1 我最开始的想法是每一个节点对应一个数字（行号）确定他是在哪一行，等到对应节点的行号与下一个节点不一样的时候，就换行。与上面的代码区别是多了一个ArrayList，记录好多不需要的信息，浪费了。</p>
<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p>1 层次遍历</p>
<ul>
<li>层次遍历，底层就是一个队列。算法思路是： 先将二叉树头节点入队列，然后出队列，访问该节点，如果它有左子树，则将左子树根节点入队，如果它有右子树，则将右子树根节点入队。然后出队列，对出队列节点访问，如此反复，直到队列为空为止。</li>
</ul>
<h1 id="More"><a href="#More" class="headerlink" title="More"></a>More</h1><p>代码中是通过LinkedList模拟队列的，Java把队列，栈等数据结构封装的很好，但是最好还是要自己来理解实现一下这些底层。最近有看redis，里面很多操作的底层也是这些基础。</p>
]]></content>
      
        <categories>
            
            <category> algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[二叉树的下一个结点]]></title>
      <url>/2018/04/23/424_1/</url>
      <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。</p>
</blockquote>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeLinkNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeLinkNode left = <span class="keyword">null</span>;</span><br><span class="line">    TreeLinkNode right = <span class="keyword">null</span>;</span><br><span class="line">    TreeLinkNode next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    TreeLinkNode(<span class="keyword">int</span> val) &#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function">TreeLinkNode <span class="title">GetNext</span><span class="params">(TreeLinkNode node)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(node.right!=<span class="keyword">null</span>)&#123;    <span class="comment">//如果有右子树，则找右子树的最左节点</span></span><br><span class="line">            node = node.right;</span><br><span class="line">            <span class="keyword">while</span>(node.left!=<span class="keyword">null</span>) node = node.left;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(node.next!=<span class="keyword">null</span>)&#123; <span class="comment">//没右子树，则找第一个当前节点是父节点左孩子的节点</span></span><br><span class="line">            <span class="keyword">if</span>(node.next.left==node) <span class="keyword">return</span> node.next;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;   <span class="comment">//退到了根节点仍没找到，则返回null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p><img src="/images/二叉树的下一个结点 .png" alt="二叉树的下一个结点"></p>
<h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><p>1 对应图片中的b）开始没有思考的那么透彻，像j节点，和M节点开始都是迷糊的。</p>
<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p>1 中序遍历</p>
<ul>
<li>如果二叉树为空树，则什么都不做；否则：<ul>
<li>先序遍历左子树</li>
<li>访问根节点</li>
<li>先序遍历右子树</li>
</ul>
</li>
</ul>
<h1 id="More"><a href="#More" class="headerlink" title="More"></a>More</h1><p>图片是出自<a href="https://www.nowcoder.com/profile/773262" target="_blank" rel="noopener">小河沟大河沟</a></p>
]]></content>
      
        <categories>
            
            <category> algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重建二叉树]]></title>
      <url>/2018/04/20/420_1/</url>
      <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</p>
</blockquote>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for binary tree</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">reConstructBinaryTree</span><span class="params">(<span class="keyword">int</span> [] pre,<span class="keyword">int</span> [] in)</span> </span>&#123;</span><br><span class="line">        TreeNode root=reConstructBinaryTree(pre,<span class="number">0</span>,pre.length-<span class="number">1</span>,in,<span class="number">0</span>,in.length-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//前序遍历&#123;1,2,4,7,3,5,6,8&#125;和中序遍历序列&#123;4,7,2,1,5,3,8,6&#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">reConstructBinaryTree</span><span class="params">(<span class="keyword">int</span> [] pre,<span class="keyword">int</span> startPre,<span class="keyword">int</span> endPre,<span class="keyword">int</span> [] in,<span class="keyword">int</span> startIn,<span class="keyword">int</span> endIn)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果树为空 </span></span><br><span class="line">        <span class="keyword">if</span>(startPre&gt;endPre||startIn&gt;endIn)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//根据先序遍历确定root节点</span></span><br><span class="line">        TreeNode root=<span class="keyword">new</span> TreeNode(pre[startPre]);</span><br><span class="line">        <span class="comment">//递归：分别确定左子树和右子树</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=startIn;i&lt;=endIn;i++)</span><br><span class="line">   			<span class="comment">//确定子树的root节点</span></span><br><span class="line">            <span class="keyword">if</span>(in[i]==pre[startPre])&#123;</span><br><span class="line">            	<span class="comment">//左</span></span><br><span class="line">                root.left=reConstructBinaryTree(pre,startPre+<span class="number">1</span>,startPre+i-startIn,in,startIn,i-<span class="number">1</span>);</span><br><span class="line">                <span class="comment">//右</span></span><br><span class="line">                root.right=reConstructBinaryTree(pre,i-startIn+startPre+<span class="number">1</span>,endPre,in,i+<span class="number">1</span>,endIn);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>根据先序确定根节点，查找对应中序中位置，在中序位置左边为左子树，右边为右子树，递归调用。</p>
<h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><p>1 已经忘了如何根据前序和中序确定一棵树</p>
<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p>1 先序遍历（前序遍历）</p>
<ul>
<li>如果二叉树为空树，则什么都不做；否则：<ul>
<li>访问根节点</li>
<li>先序遍历左子树</li>
<li>先序遍历右子树</li>
</ul>
</li>
</ul>
<p>2 中序遍历</p>
<ul>
<li>如果二叉树为空树，则什么都不做；否则：<ul>
<li>先序遍历左子树</li>
<li>访问根节点</li>
<li>先序遍历右子树</li>
</ul>
</li>
</ul>
<p>3 后续遍历</p>
<ul>
<li>如果二叉树为空树，则什么都不做；否则：<ul>
<li>先序遍历左子树</li>
<li>先序遍历右子树</li>
<li>访问根节点</li>
</ul>
</li>
</ul>
<h1 id="More"><a href="#More" class="headerlink" title="More"></a>More</h1><p>回看树，其实树里有好多东西的</p>
]]></content>
      
        <categories>
            
            <category> algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[链表总结]]></title>
      <url>/2018/04/20/420/</url>
      <content type="html"><![CDATA[<blockquote>
<p>链表是一种递归的数据机构，它或者为空(null)，或者是指向一个节点(node)的引用，该节点含有一个泛型的元素和一个指向另一条链表的引用。</p>
</blockquote>
<h1 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*    public class ListNode &#123;</span></span><br><span class="line"><span class="comment">*        Object val;</span></span><br><span class="line"><span class="comment">*        ListNode next = null;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*        ListNode() &#123; &#125;</span></span><br><span class="line"><span class="comment">*        ListNode(Object val) &#123;</span></span><br><span class="line"><span class="comment">*            this.val = val;</span></span><br><span class="line"><span class="comment">*        &#125;</span></span><br><span class="line"><span class="comment">*    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>上述代码定义了ListNode对象，有两个实例变量，val和next，val类型是任何你希望的数据类型（这里用了Object），next指下一个节点（默认为null）。<br>这个定义可能会有写费解，因为这个是一个<strong>递归的数据结构</strong>。</p>
<h1 id="链表的操作"><a href="#链表的操作" class="headerlink" title="链表的操作"></a>链表的操作</h1><h2 id="表头插入节点"><a href="#表头插入节点" class="headerlink" title="表头插入节点"></a>表头插入节点</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ListNode oldfirst = first;</span><br><span class="line">first = <span class="keyword">new</span> ListNode();</span><br><span class="line">first.next = oldfirst;</span><br></pre></td></tr></table></figure>
<h2 id="表头删除节点"><a href="#表头删除节点" class="headerlink" title="表头删除节点"></a>表头删除节点</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">first = first.next;</span><br></pre></td></tr></table></figure>
<h2 id="表尾插入节点"><a href="#表尾插入节点" class="headerlink" title="表尾插入节点"></a>表尾插入节点</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">oldlast = last;</span><br><span class="line">last = <span class="keyword">new</span> ListNode();</span><br><span class="line">oldlast.next = last;</span><br></pre></td></tr></table></figure>
<h1 id="如何学好链表"><a href="#如何学好链表" class="headerlink" title="如何学好链表"></a>如何学好链表</h1><p>可以和<a href="https://blog.csdn.net/jianyuerensheng/article/details/51200274" target="_blank" rel="noopener">这位</a>学下。<br>也可以像算法第四版用链表实现一个栈、队列。</p>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[链表中环的入口结点]]></title>
      <url>/2018/04/19/419_1/</url>
      <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>一个链表中包含环，请找出该链表的环的入口结点。</p>
</blockquote>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> public class ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    ListNode next = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">EntryNodeOfLoop</span><span class="params">(ListNode pHead)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       ArrayList&lt;ListNode&gt; list = <span class="keyword">new</span> ArrayList&lt;ListNode&gt;();</span><br><span class="line">        <span class="keyword">if</span>(pHead == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(!list.contains(pHead))&#123;</span><br><span class="line">        	list.add(pHead);</span><br><span class="line">        	pHead = pHead.next;</span><br><span class="line">            <span class="keyword">if</span>(pHead == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>遍历一遍链表，并将每个节点存入ArrayList,如果遍历过程中发现ArrayList已经存在当前节点，那说明这个就是我们要找的节点</p>
<h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><p>1 题目说是链表有环，但是提交代码后，发现要判断这个链表有没有环。</p>
<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p>1 了解下ArrayList的contain方法是怎么实现的</p>
<h1 id="More"><a href="#More" class="headerlink" title="More"></a>More</h1><p>看别人提交的代码，像是在解一道数学题，首先你要设x=2y，然后回推，效率是高的，复杂度也低，但是耗脑子，可以学习一波。</p>
]]></content>
      
        <categories>
            
            <category> algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[从尾到头打印链表]]></title>
      <url>/2018/04/19/419/</url>
      <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>输入一个链表，从尾到头打印链表每个节点的值。</p>
</blockquote>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*    public class ListNode &#123;</span></span><br><span class="line"><span class="comment">*        int val;</span></span><br><span class="line"><span class="comment">*        ListNode next = null;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*        ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment">*            this.val = val;</span></span><br><span class="line"><span class="comment">*        &#125;</span></span><br><span class="line"><span class="comment">*    &#125;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printListFromTailToHead</span><span class="params">(ListNode listNode)</span> </span>&#123;</span><br><span class="line">    	<span class="comment">//存取链表中的数据</span></span><br><span class="line">     	ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">     	<span class="comment">//存取list的反向数据</span></span><br><span class="line">		ArrayList&lt;Integer&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		<span class="comment">//如果为空，啥也不做</span></span><br><span class="line">		<span class="keyword">if</span>(listNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> list1;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(listNode!=<span class="keyword">null</span>) &#123;</span><br><span class="line">			list.add(listNode.val);</span><br><span class="line">			listNode = listNode.next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = list.size()-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--) &#123;</span><br><span class="line">			list1.add(list.get(i));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> list1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>链表读取存储到ArrayList中，然后再从ArrayList反向读取存储到另一个ArrayList（就是栈的操作）</p>
<h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><p>1 我不是很确定空的ArrayList输出是什么，是”[]”;</p>
<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p>1 <strong>链表</strong></p>
]]></content>
      
        <categories>
            
            <category> algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[删除链表中重复的结点]]></title>
      <url>/2018/04/18/418/</url>
      <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。 例如，链表1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5 处理后为 1-&gt;2-&gt;5</p>
</blockquote>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> public class ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    ListNode next = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplication</span><span class="params">(ListNode pHead)</span> </span>&#123;</span><br><span class="line">        ListNode result;</span><br><span class="line">        ListNode temp = pHead;</span><br><span class="line">        ListNode index = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        index.next = pHead;</span><br><span class="line">        result = index;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp.next != <span class="keyword">null</span> &amp;&amp; temp.next.val == temp.val) &#123;</span><br><span class="line">                <span class="keyword">while</span> (temp.next != <span class="keyword">null</span> &amp;&amp; temp.next.val == temp.val) &#123;</span><br><span class="line">                    temp = temp.next;</span><br><span class="line">                &#125;</span><br><span class="line">                temp = temp.next;</span><br><span class="line">                index.next = temp;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                index = index.next;</span><br><span class="line">                temp = temp.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><p>1 第一次提交删除了重复的节点，题目要求是所有重复的节点，一个也不留<br>2 对于Java中引用理解需要加深<br>3 链表的操作需要了解，这里尽管只有删除</p>
<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p>1 <strong>链表</strong><br>1.1 数据结构<br>1.2 操作</p>
<p>2 <strong>Java中的引用</strong></p>
]]></content>
      
        <categories>
            
            <category> algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[顺时针打印矩阵]]></title>
      <url>/2018/04/17/417/</url>
      <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16<br>则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.</p>
</blockquote>
<a id="more"></a>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printMatrix</span><span class="params">(<span class="keyword">int</span> [][] matrix)</span> </span>&#123;</span><br><span class="line">	        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">	        <span class="comment">//判断matrix是否为空</span></span><br><span class="line">	        <span class="keyword">if</span>(matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span>)</span><br><span class="line">	        	<span class="keyword">return</span> list;</span><br><span class="line">	        <span class="comment">//matrix的行</span></span><br><span class="line">	        <span class="keyword">int</span> row = matrix.length;</span><br><span class="line">	        <span class="comment">//matrix的列</span></span><br><span class="line">	        <span class="keyword">int</span> col = matrix[<span class="number">0</span>].length;</span><br><span class="line">	        <span class="comment">//方便矩阵的遍历</span></span><br><span class="line">	        <span class="keyword">int</span> rowStart = <span class="number">0</span>;</span><br><span class="line">	        <span class="keyword">int</span> rowEnd = row - <span class="number">1</span>;</span><br><span class="line">	        <span class="keyword">int</span> colStart = <span class="number">0</span>;</span><br><span class="line">	        <span class="keyword">int</span> colEnd = col - <span class="number">1</span>;</span><br><span class="line">	        </span><br><span class="line">	        <span class="keyword">while</span>(colStart &lt;= colEnd &amp;&amp; rowStart &lt;= rowEnd) &#123;</span><br><span class="line">	        	<span class="keyword">for</span>(<span class="keyword">int</span> i = colStart; i &lt;= colEnd; i++)</span><br><span class="line">	        		list.add(matrix[rowStart][i]);</span><br><span class="line">	        	</span><br><span class="line">	        	<span class="keyword">for</span>(<span class="keyword">int</span> i = rowStart+<span class="number">1</span>; i &lt;= rowEnd; i++)</span><br><span class="line">	        		list.add(matrix[i][colEnd]);</span><br><span class="line">	        	</span><br><span class="line">	        	<span class="comment">//防止重复遍历</span></span><br><span class="line">	        	<span class="keyword">if</span>(rowStart != rowEnd) &#123;</span><br><span class="line">	        		<span class="keyword">for</span>(<span class="keyword">int</span> i = colEnd-<span class="number">1</span>; i &gt;= colStart; i--)</span><br><span class="line">	        			list.add(matrix[rowEnd][i]);</span><br><span class="line">	        	&#125;</span><br><span class="line">	        	<span class="comment">//防止重复遍历</span></span><br><span class="line">	        	<span class="keyword">if</span>(colStart != colEnd) &#123;</span><br><span class="line">	        		<span class="keyword">for</span>(<span class="keyword">int</span> i = rowEnd-<span class="number">1</span>; i &gt; rowStart; i--)</span><br><span class="line">	        			list.add(matrix[i][colStart]);</span><br><span class="line">	        	&#125;</span><br><span class="line">	        	colStart++;</span><br><span class="line">	        	colEnd--;</span><br><span class="line">	        	rowStart++;</span><br><span class="line">	        	rowEnd--;</span><br><span class="line">	        &#125;</span><br><span class="line">	        <span class="keyword">return</span> list;</span><br><span class="line">	    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><p>1 对于向量，从上到下（从左往右）和从下到上（从右往左）只要遍历一次。如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] a = &#123;&#123;<span class="number">1</span>&#125;,&#123;<span class="number">2</span>&#125;,&#123;<span class="number">3</span>&#125;,&#123;<span class="number">4</span>&#125;,&#123;<span class="number">5</span>&#125;&#125;</span><br></pre></td></tr></table></figure></p>
<p>2 很多边界例子不会考虑。</p>
<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p>1 高维数组<br>1.1 如何定义一个二维（更高维）的数组<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] a = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span>[][][] three = &#123;&#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;&#125;,&#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span>[][] b = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">2</span>];</span><br></pre></td></tr></table></figure></p>
<p>1.2数组的长度<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> row = matrix.length;</span><br><span class="line"><span class="keyword">int</span> col = matrix[<span class="number">0</span>].length;</span><br></pre></td></tr></table></figure></p>
<p>1.3 <code>java Arrays.deepToString()</code>函数<br>将高维数组字符串化</p>
<h1 id="今天"><a href="#今天" class="headerlink" title="今天"></a>今天</h1><p>人生第一次来做这种题目，说实话不会做，做了会有很多错，尽管看起来很简单。</p>
]]></content>
      
        <categories>
            
            <category> algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[这几天]]></title>
      <url>/2018/01/22/1.22/</url>
      <content type="html"><![CDATA[<blockquote>
<p>好多天没有来玩博客，Markdown的语法也忘了，hexo的命令也忘了，导师的教我写的东西，一个月没碰了，啥啥啥都忘了。。。。</p>
</blockquote>
<p>前几天无聊看了一波python文档，把<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="noopener">廖老师</a>写的文档和<a href="http://vdisk.weibo.com/s/BE2Z8B94-5w97" target="_blank" rel="noopener">《简明Python教程》</a>过了一遍，然后发现这是一个神奇的世界。</p>
<p>恩，写这个文章，其实也不是说我要介绍我这天的心得体会，就只是来冒个泡，写文章真的需要坚持，如果你不是职业的话，而且，我发现的我不知道写啥，内心啥也木有，</p>
<p>这几天看了一波吐槽大会，interesting，哈哈哈哈哈哈哈哈，然后还去下了一波<a href="https://tieba.baidu.com/p/5326039455?red_tag=1628684649" target="_blank" rel="noopener">《手把手教你脱口秀》</a>，好有意思。</p>
<p>我还准备买个陶笛，人生最大的梦想，懂一波音乐。</p>
<p>这几天，大家都放假，氛围特别浓重，说实话，我都给自己放一个月了。。。。</p>
<p>不知道自己写了什么，就当记录一下吧，byebye。。。。。</p>
]]></content>
      
        <categories>
            
            <category> life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> life </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[多个电脑一起写blog]]></title>
      <url>/2018/01/13/blog/</url>
      <content type="html"><![CDATA[<blockquote>
<p>你是不是也有这样子的问题，如果台式机可以写博客上传，那笔记本想写怎么办呢？我来告诉你。</p>
</blockquote>
<p>传送门送上：<a href="http://blog.csdn.net/Monkey_LZL/article/details/60870891" target="_blank" rel="noopener">1</a>，<a href="https://righere.github.io/2016/10/10/install-hexo/" target="_blank" rel="noopener">2</a><br>第一篇的文章比较短，但是就是精华，第二篇，有部分图文，会给你一些更直观的参考。</p>
<p>我呢，还是给大家一些<strong>建议</strong></p>
<ol>
<li>不要怕出错，说实话，对于一个小白来说，什么也不懂，什么是git啊，没关系，不要担心，要相信自己。</li>
<li>尽管你可能不懂git,可是这玩意还是不得不学的额，常见的命令<ul>
<li>git pull origin hexo: 本机同步GitHub里的文章</li>
<li>git push origin hexo: 上传文章到GitHub</li>
</ul>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git的使用]]></title>
      <url>/2018/01/13/note/</url>
      <content type="html"><![CDATA[<h1 id="配置用户名和Email"><a href="#配置用户名和Email" class="headerlink" title="配置用户名和Email"></a>配置用户名和Email</h1><p>$ git config –global user.name “Your Name”<br>$ git config –global user.email “email@example.com”</p>
<h1 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h1><p>初始化一个Git仓库，使用<strong>git init</strong>命令。<br>添加文件到Git仓库，分两步：</p>
<ul>
<li>第一步，使用命令<strong>git add <file></file></strong>，注意，可反复多次使用，添加多个文件；</li>
<li>第二步，使用命令<strong>git commit -m “”</strong>，完成。</li>
</ul>
<h1 id="vim的使用"><a href="#vim的使用" class="headerlink" title="vim的使用"></a>vim的使用</h1><p><strong>i</strong> 进入输入模式<br><strong>ESC</strong> 退出输入模式，进入命令模式<br><strong>:wq</strong> 保存修改并退出vim</p>
<a id="more"></a>
<h1 id="状态的查看和比较"><a href="#状态的查看和比较" class="headerlink" title="状态的查看和比较"></a>状态的查看和比较</h1><ul>
<li>比较 git diff</li>
<li>查看 git status 文件名</li>
</ul>
<h1 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h1><ul>
<li>查看历史 git log/git log –pretty=online<br>当前版本用HEAD表示，HEAD^表示上一个版本，HEAD^^表示上上版本，HEAD~100表示上100个版本</li>
<li>回退到当前版本的上一个版本 git reset –hard HEAD^<br>当你回退到以前版本，那当前版本会不见，可以使用 git reset –hard (commit id)来恢复</li>
<li>记录执行的每一次命令 git reflog<br>通过此条命令可以查看到各个版本commit id</li>
</ul>
<p>HEAD指向当前版本<br>git log 查看提交历史<br>git reflog 查看命令历史</p>
<h1 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h1><ul>
<li>工作区(Working Directory)<br>就是当前目录</li>
<li>版本库(Repository)<br>工作区中隐藏目录.git,Git的版本库<br>版本库中有：暂存区、第一个分支master、指向master的一个指针HEAD</li>
<li>暂存区(Stage)<br><strong>把文件往Git版本库里添加的时候，分为两步</strong><br>第一步：git add，意义是把文件添加到暂存区<br>第二步: git commit,意义是将暂存区的所有内容提交到当前分支<br>开始默认我们在master分支</li>
</ul>
<p>Git是如何跟踪修改的：每次修改，如果不add到暂存区，那就不会加入到commit中。</p>
<h1 id="撤销和修改"><a href="#撤销和修改" class="headerlink" title="撤销和修改"></a>撤销和修改</h1><p>命令是：<strong>git checkout – filename</strong></p>
<ul>
<li>file自修改后还没有被放到暂存区，使用命令后，返回版本库的状态</li>
<li>file已经添加到了暂存区，又作了修改，使用命令后，返回暂存区的状态<br>总之，是文件返回最近一次git commit 或 git add 的状态</li>
</ul>
<p>命令：git reset HEAD file<br>指的是把暂存区的修改撤销，回到工作区的版本<br>git reset 既可以回退版本，也可以把暂存区的修改回退到工作区。</p>
<p>总结：</p>
<ul>
<li>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout – file。</li>
<li>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。</li>
<li>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</li>
</ul>
<h1 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h1><p>将已经提交到版本库的文件删除，需要同步git</p>
<ol>
<li>git rm file </li>
<li>git commit -m “”<br>如果是误删<br>git checkout – file</li>
</ol>
<h1 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h1><ol>
<li>要关联一个远程库，使用命令**git remote add origin git@server-name:path/repo-name.git;</li>
<li>关联后，使用命令<strong>git push -u origin master</strong> 第一次推送master分支的所有内容;</li>
<li>此后，每次本地提交后，只要有必要，就可以使用命令<strong>git push origin master</strong>推送最新修改;</li>
</ol>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>ssh:是一个安全协议，git支持git协议。第一次使用ssh的时候，需要设置公钥和私钥，命令是</p>
<ul>
<li>ssh-keygen -t rsa -C “youremail@example.com”<br>对应的在用户主目录中会生成.ssh目录，目录中有id_rsa和id_rsa.pub两个文件</li>
</ul>
<h1 id="clone远程库"><a href="#clone远程库" class="headerlink" title="clone远程库"></a>clone远程库</h1><p>命令是<strong>git clone git@server-name:path/repo-name.git</strong><br>git支持多种协议，包括https，ssh 等等</p>
<h1 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h1><ul>
<li><strong>git checkout -b dev</strong>:创建了dev分支<br>命令等同于：git branch dev ; git checkout dev</li>
<li><strong>git branch</strong>:查看当前分支，罗列出所有分支</li>
<li><strong>git merge dev</strong>:将dev分支的工作成果合并到当前分支上</li>
<li><strong>git branch -d dev</strong>:删除dev分支</li>
</ul>
<h1 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h1><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。<br>用<strong>git log –graph</strong>命令可以看到合并图。<br>好看一点用git log –graph –pretty=oneline –abbrev -commit</p>
<h1 id="分支策略"><a href="#分支策略" class="headerlink" title="分支策略"></a>分支策略</h1><ul>
<li>master分支用来发布新版本，平时不东</li>
<li>dev分支是用来干活的，干完活和master合并</li>
<li>每个团队成员创建自己的分支，是不是和dev分支合并</li>
</ul>
<p>合并时，默认是fast forward合并，合并后删除分支后看不出是合并的，会丢失信息，加上–nn-ff参数就可以使用普通模式合并</p>
<h1 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h1><p>当我们遇到bug需要修复，手头的任务又没有做完，我们可以使用<strong>git stash</strong>来保护现场，类似于进程中断。当我们修复好bug后，我们可以用<strong>git stash list</strong>查看工作现场。</p>
<ul>
<li>git stash</li>
<li>git stash list</li>
<li>git stash apply:恢复现场，但不删除stash</li>
<li>git stash drop:删除stash</li>
<li>git stash pop:等于上两步</li>
</ul>
<h1 id="feature分支"><a href="#feature分支" class="headerlink" title="feature分支"></a>feature分支</h1><p>开发一个新feature，最好创建一个分支；如果要丢弃一个没有被合并过的分支，可以通过git branch -D name 强行删除。</p>
<h1 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h1><ul>
<li>git remote :用于查看远程库的信息</li>
<li>git remote -v :用于查看远程库的详细信息</li>
<li>git push origin master/dev :master分支需要和远程同步，dev分支也一样，bug分支不需要，feature分支看情况</li>
</ul>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[echo xi]]></title>
      <url>/2018/01/13/first/</url>
      <content type="html"><![CDATA[<h2 id="xixi"><a href="#xixi" class="headerlink" title="xixi"></a>xixi</h2><h3 id="OK"><a href="#OK" class="headerlink" title="OK?"></a>OK?</h3><blockquote>
<p>你知道吗？ 我看别人的博客都是名言警句随口来，我呢，刚刚憋了许久，木有啊！！  /(ㄒoㄒ)/~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> life </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Me]]></title>
      <url>/2018/01/13/Me/</url>
      <content type="html"><![CDATA[<p>Hey,大家好！！！<br>你们可以叫我echo，这是三毛的英文名，感觉三毛和荷西的爱情很酷，所以我随了三毛。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[如何建立一个独立博客]]></title>
      <url>/2018/01/12/hexo-github/</url>
      <content type="html"><![CDATA[<blockquote>
<p>我来猜一猜你为什么要建博客：装逼，找个地方发泄，无聊。。。<br>如果不对，你可以留言告诉我 ^_^</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如果你是小白，那你肯定会受好多挫，你可以百度也可以Google，当然我希望什么也不要遇到，因为我会告诉你所有可能的错，别问我为什么 o(╥﹏╥)o</p>
<h1 id="what-you-need"><a href="#what-you-need" class="headerlink" title="what you need ?"></a>what you need ?</h1><ol>
<li>git</li>
<li>hexo</li>
<li>github</li>
</ol>
<a id="more"></a>
<p>这三个是啥呢？<br><strong>github</strong>，类似于一个服务器，这样别人就可以在网上找到你的博客，当然你也可以自己买服务器。<br><strong>hexo</strong>，模板，就是博客显示页面的样子，有好多好人已经写好了很多好看的模板，你挑一个喜欢的，当然你也可以自己写！<br><strong>git</strong>，上传工具，就是把你写好的东西，上传到网上。</p>
<h1 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h1><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git下载:</a><br>下载完就可以安装了，一路next</p>
<p><img src="/images/git1.png" alt="git1"></p>
<p><img src="/images/git2.png" alt="git2"></p>
<p><img src="/images/git3.png" alt="git3"></p>
<p>结束安装，检查自己有木有成功，<strong>Win+R</strong>，cmd<br><img src="/images/gitSuccess.png" alt="gitSuccess"></p>
<p>如果看见版本号，就成功啦！！是不是很惊喜，很开心，吼简单哦！！</p>
<h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><p>恩~，这个地方有点烦的，请注意！！！<br><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">官网：</a><br><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官方文档：</a>很详细，可以仔细学习一波。<br>我呢，就给一些<strong>注意事项</strong></p>
<ol>
<li>先要安装<a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">Node.js</a></li>
<li>在任何地方(比如桌面)右击，点击 git bash here，在输入 npm install -g hexo-cli 回车，输入画面如图：<br><img src="/images/hexo1.png" alt="hexoInstall"></li>
<li>hexo是使用Markdown解析文章的，那标记后面需要<strong>一个空格</strong><br><img src="/images/hexo2.png" alt="space"><br>图片中每个key后面都有空格，图中的绿色方框，有点大小不一，但都代表一个空格</li>
<li>最后写完文章部署的时候，可以用<strong>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</strong>一条命令<br>我在写这个文档的时候，也重看了一边官网，虽说很详细，带我不想看啊，好烦啊，好烦啊，与木有这种感觉，o(╥﹏╥)o</li>
</ol>
<h1 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h1><p>这个真的是一个好神奇的地方，抄作业的好地方，代码不会写，来抄一波，没有灵感，来搜一波，比什么百度靠谱多了。<br>来一个<a href="https://www.jianshu.com/p/189fd945f38f" target="_blank" rel="noopener"><strong>传送门</strong></a>，这篇文章在这儿写的很详细贴心，最主要页面看的不是那么难看。</p>
<h1 id="OK"><a href="#OK" class="headerlink" title="OK"></a>OK</h1><p>我想你已经完成你的博客的建立了，是不是很happy，我当时就老happy了，可是，记住写博客还是一件很艰难的事，时间久了，人就懒了，就不写了。当然，我知道说的不是你，(#^.^#)</p>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown的使用]]></title>
      <url>/2018/01/12/Markdown/</url>
      <content type="html"><![CDATA[<h1 id="Markdown的好处"><a href="#Markdown的好处" class="headerlink" title="Markdown的好处"></a>Markdown的好处</h1><ul>
<li>比纯文本排版显示的好看</li>
<li>比Word排版显示简单</li>
<li>学起来简单</li>
</ul>
<a id="more"></a>
<h1 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h1><ul>
<li><a href="http://wowubuntu.com/markdown/#list" target="_blank" rel="noopener">Markdown中文版语法说明</a></li>
<li><a href="https://www.jianshu.com/p/q81RER" target="_blank" rel="noopener">博客1</a></li>
<li><a href="https://www.jianshu.com/p/1e402922ee32/" target="_blank" rel="noopener">博客2</a></li>
</ul>
<h1 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h1><ol>
<li>不用什么语法都学，学几个常用的就可以，比如标题，<strong>粗体</strong>，<em>斜体</em>。</li>
<li>你可以用<strong>通用文本编辑器</strong>：notepad++，sublime，也可以用<strong>专用</strong>的<a href="http://code52.org/DownmarkerWPF/" target="_blank" rel="noopener">MarkPad</a>,<a href="http://25.io/mou/" target="_blank" rel="noopener">Mou</a>。</li>
</ol>
<blockquote>
<p>祝你开心每一天！！！<br>(<em>^▽^</em>)</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
